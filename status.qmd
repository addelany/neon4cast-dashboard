---
title: "Status"
editor: visual
---

```{r setup, echo = FALSE, message=FALSE, warning=FALSE}
# These may need to change later 
knitr::opts_chunk$set(echo = FALSE, message=FALSE, warning=FALSE)
library(ggiraph)
library(patchwork)
library(tidyverse)
library(neon4cast)
library(score4cast)
library(vis4cast)
library(glue)
library(reactable)
library(httr)
score4cast::ignore_sigpipe()

```

## Data Status

```{r}
## table that covers general forecasting challenge diagnostics

# themes_list <- c('aquatics','phenology','ticks','beetles') #terrestrial name is different (need to ask)
# 
# theme_stats <- theme_statistics(themes_list)
# 
# reactable(theme_stats,
#           columns = list(theme = colDef(name='Theme'),
#                          n_teams = colDef(name='Number of Teams'),
#                          n_submissions = colDef(name='Forecasts')),
#           highlight = TRUE)

```


```{r}

## Define functions and variables to be used in theme panels 

cutoff_week <- as.character(Sys.Date() - 7)
cutoff_month <- as.character(Sys.Date() - 30)
cutoff_year <- as.character(Sys.Date() - 365)

# might consider puttin this function somewhere else and sourcing it in
forecast_time_summary <- function(time_cutoff, forecast_theme){
  cache_path <- paste0('cache/parquet/',forecast_theme)
  forecasts_df <- arrow::open_dataset("cache/parquet/aquatics") %>%
    filter(reference_datetime >= time_cutoff) %>%
    distinct(model_id, reference_datetime) %>%
    count(model_id) %>%
    collect()

  n_4cast <- sum(forecasts_df$n)
  return(n_4cast)
}

```

::: panel-tabset

## Met Data
This shows the date of the most recent NOAA forecast run for each site
```{r}
print('met data')

# NOAA DATA TEST 
#df_noaa <- neon4cast::noaa_stage2()

#df_noaa2 <- df_noaa %>% 
#  group_by(site_id) %>% 
#  summarize(max = max(lubridate::as_date(start_date))) %>% 
#  collect()

#reactable(df_noaa2)


```

## Phenology Data

```{r}
## Post forecast submission stats 

pheno_forecasts_week <- forecast_time_summary(cutoff_week,'phenology')
pheno_forecasts_month <- forecast_time_summary(cutoff_month,'phenology')
pheno_forecasts_year <- forecast_time_summary(cutoff_year,'phenology')

print(paste('Forecasts submitted over the last week:',pheno_forecasts_week))
print(paste('Forecasts submitted over the last month:',pheno_forecasts_month))
print(paste('Forecasts submitted over the last year:',pheno_forecasts_year))

```

## Aquatics Data

```{r}

## Post forecast submission stats 

aquatic_forecasts_week <- forecast_time_summary(cutoff_week,'aquatics')
aquatic_forecasts_month <- forecast_time_summary(cutoff_month,'aquatics')
aquatic_forecasts_year <- forecast_time_summary(cutoff_year,'aquatics')

print(paste('Forecasts submitted over the last week:',aquatic_forecasts_week))
print(paste('Forecasts submitted over the last month:',aquatic_forecasts_month))
print(paste('Forecasts submitted over the last year:',aquatic_forecasts_year))

## TABLE TO SUMMARIZE DATA BY SITE AND VARIABLE (SEARCHABLE)

df_aquatics <- readr::read_csv("https://data.ecoforecast.org/neon4cast-targets/aquatics/aquatics-targets.csv.gz")

df_summary <- df_aquatics %>%
  drop_na(observation) %>%
  group_by(site_id,variable) %>%
  summarize(max_date = max(lubridate::as_date(datetime)))

reactable(df_summary, 
          columns = list(max_date = colDef(name='max date')),
          defaultPageSize = 20, 
          filterable = TRUE, 
          highlight = TRUE)


```

## Terrestrial Data

```{r}
## Post forecast submission stats --check back on this about daily or 30 min 

```

## Ticks Data

```{r}
## Post forecast submission stats 

ticks_forecasts_week <- forecast_time_summary(cutoff_week,'ticks')
ticks_forecasts_month <- forecast_time_summary(cutoff_month,'ticks')
ticks_forecasts_year <- forecast_time_summary(cutoff_year,'ticks')

print(paste('Forecasts submitted over the last week:',ticks_forecasts_week))
print(paste('Forecasts submitted over the last month:',ticks_forecasts_month))
print(paste('Forecasts submitted over the last year:',ticks_forecasts_year))
```

## Beetles Data

```{r}
## Post forecast submission stats 

beetles_forecasts_week <- forecast_time_summary(cutoff_week,'beetles')
beetles_forecasts_month <- forecast_time_summary(cutoff_month,'beetles')
beetles_forecasts_year <- forecast_time_summary(cutoff_year,'beetles')

print(paste('Forecasts submitted over the last week:',beetles_forecasts_week))
print(paste('Forecasts submitted over the last month:',beetles_forecasts_month))
print(paste('Forecasts submitted over the last year:',beetles_forecasts_year))
```


## Automated Jobs

```{r}
health_check <- GET(
  "https://healthchecks.io/api/v1/checks/",
  accept_json(),
  add_headers('X-Api-Key' = 'YKpvNOQWGtcGtyKu4rgC0Z7_0AQFo4kj')
)

check_parsed <- content(health_check,as='parsed')$checks

hc_names <- c()
hc_status <- c()

for (i in seq.int(1,length(check_parsed))){
  hc_names[i] <- check_parsed[[i]][[1]] # json objects 1 and 7 are the name and status, respectively
  hc_status[i] <- check_parsed[[i]][[7]]
}

check_df <- data.frame(hc_names,hc_status)


reactable(check_df,
          columns = list(hc_names = colDef(name='Process Name'),
                         hc_status = colDef(name='Status')),
          defaultPageSize = 20,
          filterable = TRUE,
          highlight = TRUE)

## STILL NEED TO MAKE PROCESS NAMES MORE USER READABLE 
```

:::
